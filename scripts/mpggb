#!/usr/bin/env bash

# exit when any command fails
set -eo pipefail

target_fasta=false
query_fasta=false
output_dir="."
bandage_node_width=500
resume=false
map_pct_id=false
align_pct_id=0
n_secondary=false
segment_length=false
block_length=false
lastz_params=""
mash_kmer=16
min_match_length=19
transclose_batch=1000000
max_block_weight=10000
block_id_min=0
ratio_contain=0
max_path_jump=5000
max_edge_jump=5000
max_poa_length=10000
# poa param suggestions from minimap2
# - asm5, --poa-params 1,19,39,3,81,1, ~0.1 divergence
# - asm10, --poa-params 1,9,16,2,41,1, ~1 divergence
# - asm20, --poa-params 1,4,6,2,26,1, ~5% divergence
poa_params="1,4,6,2,26,1"
do_viz=false
do_layout=false
threads=1
mapper=mashz
no_merge_segments=false
do_stats=false
exclude_delim=false
consensus_spec=10,100,1000,10000
no_splits=false
multiqc=false

if [ $# -eq 0 ];
then
    show_help=true
fi

# read the options
cmd=$0" "$@
TEMP=`getopt -o i:q:o:p:a:n:s:l:K:k:B:w:j:P:e:t:vLhWMSY:z:G:C:I:R:Nr:m --long input-fasta:,query-fasta:,output-dir:,map-pct-id:,align-pct-id:,n-secondary:,segment-length:,block-length-min:,mash-kmer:,min-match-length:,transclose-batch:,block-weight-max:,path-jump-max:,subpath-min:,edge-jump-max:,threads:,do-viz,do-layout,help,wfmash,no-merge-segments,do-stats,exclude-delim:,lastz-params:,poa-length-max:,poa-params:,consensus-spec:,block-id-min:,ratio-contain:,no-splits,resume,multiqc -n 'pggb' -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -i|--target-fasta) target_fasta=$2 ; shift 2 ;;
        -q|--query-fasta) query_fasta=$2 ; shift 2 ;;
        -o|--output-dir) output_dir=$2 ; shift 2 ;;
        -p|--map-pct-id) map_pct_id=$2 ; shift 2 ;;
        -a|--align-pct-id) align_pct_id=$2 ; shift 2 ;;
        -n|--n-secondary) n_secondary=$2 ; shift 2 ;;
        -s|--segment-length) segment_length=$2 ; shift 2 ;;
        -l|--block-length) block_length=$2 ; shift 2 ;;
        -M|--no-merge-segments) no_merge_segments=true ; shift ;;
        -N|--no-splits) no_splits=true ; shift ;;
        -K|--mash-kmer) mash_kmer=$2 ; shift 2 ;;
        -W|--wfmash) mapper=wfmash ; shift ;;
        -Y|--exclude-delim) exclude_delim=$2 ; shift 2 ;;
        -z|--lastz-params) lastz_params=$2 ; shift 2 ;;
        -k|--min-match-length) min_match_length=$2 ; shift 2 ;;
        -B|--transclose-batch) transclose_batch=$2 ; shift 2 ;;
        -w|--block-weight-max) max_block_weight=$2 ; shift 2 ;;
        -I|--block-id-min) block_id_min=$2 ; shift 2 ;;
        -R|--ratio-contain) ratio_contain=$2 ; shift 2 ;;
        -j|--path-jump-max) max_path_jump=$2 ; shift 2 ;;
        -e|--edge-jump-max) max_edge_jump=$2 ; shift 2 ;;
        -G|--poa-length-max) max_poa_length=$2 ; shift 2 ;;
        -P|--poa-params) poa_params=$2 ; shift 2 ;;
        -C|--consensus-spec) consensus_spec=$2 ; shift 2 ;;
        -t|--threads) threads=$2 ; shift 2 ;;
        -v|--do-viz) do_viz=true ; shift ;;
        -L|--do-layout) do_layout=true ; shift ;;
        -S|--do-stats) do_stats=true ; shift ;;
        -m|--multiqc) multiqc=true ; shift ;;
        -r|--resume) resume=true ; shift ;;
        -h|--help) show_help=true ; shift ;;
        #-d|--debug) debug=true ; shift ;;
        --) shift ; break ;;
        *) echo "$2" "Internal error!" ; exit 1 ;;
    esac
done

if [[
       "$target_fasta" == false
    || $query_fasta == false
    || $map_pct_id == false
    || $n_secondary == false
    || $segment_length == false
   ]];
then
    show_help=true
    >&2 echo "Mandatory arguments -i, -q, -s, -n, -p"
fi

if [[ $block_length == false ]];
then
    block_length=$(echo $segment_length '*' 3 | bc)
fi

if [ $show_help ];
then
    padding=`printf %${#0}s` # prints as many spaces as the length of $0
    echo "usage: $0 -i <input-fasta> -s <segment-length> -n <n-secondary>"
    echo "       $padding -p <map-pct-id> [options]"
    echo "options:"
    echo "   [alignment]"
    echo "    -i, --target-fasta FILE     target FASTA/FASTQ file"
    echo "    -q, --query-fasta FILE      query FASTA/FASTQ file"
    echo "    -s, --segment-length N      segment length for mapping"
    echo "    -l, --block-length N        minimum block length filter for mapping [default: 3*segment-length]"
    echo "    -N, --no-split              disable splitting of input sequences during mapping [enabled by default]"
    echo "    -M, --no-merge-segments     do not merge successive mappings"
    echo "    -p, --map-pct-id PCT        percent identity in the wfmash or edyeet mashmap step"
    echo "    -a, --align-pct-id PCT      percent identity in the edyeet edlib alignment step [default: 0]"
    echo "    -n, --n-secondary N         number of secondary mappings to retain in 'map' filter mode"
    echo "    -K, --mash-kmer N           kmer size for mashmap [default: 16]"
    echo "    -W, --wfmash                use the wfmash edit-distance mashmapper [default: edyeet]"
    echo "    -Y, --exclude-delim C       skip mappings between sequences with the same name prefix before"
    echo "                                the given delimiter character [default: all-vs-all and !self]"
    echo "   [lastz]"
    echo "    -z, --laszt-params  C       param string to lastz [default: \"\"]"
    echo "   [seqwish]"
    echo "    -k, --min-match-len N       ignore exact matches below this length [default: 19]"
    echo "    -B, --transclose-batch      number of bp to use for transitive closure batch [default: 1000000]"
    echo "   [smoothxg]"
    echo "    -w, --block-weight-max N    maximum seed sequence in block [default: 10000]"
    echo "    -I, --block-id-min N        split blocks into groups connected by this identity threshold [default: 0 / OFF]"
    echo "    -R, --ratio-contain N       minimum short length / long length ratio to compare sequences for the containment"
    echo "                                metric in the clustering [default: 0, no containment metric]"
    echo "    -j, --path-jump-max         maximum path jump to include in block [default: 5000]"
    echo "    -e, --edge-jump-max N       maximum edge jump before breaking [default: 5000]"
    echo "    -G, --poa-length-max N      maximum sequence length to put into POA [default: 10000]"
    echo "    -P, --poa-params PARAMS     score parameters for POA in the form of match,mismatch,gap1,ext1,gap2,ext2"
    echo "                                [default: 1,4,6,2,26,1]"
    echo "    -C, --consensus-spec SPEC   consensus graph specification: write the consensus graph to"
    echo "                                BASENAME.cons_[spec].gfa; where each spec contains at least a min_len parameter"
    echo "                                (which defines the length of divergences from consensus paths to preserve in the"
    echo "                                output), optionally a file containing reference paths to preserve in the output,"
    echo "                                a flag (y/n) indicating whether we should also use the POA consensus paths, a"
    echo "                                minimum coverage of consensus paths to retain (min_cov), and a maximum allele"
    echo "                                length (max_len, defaults to 1e6); implies -a; example:"
    echo "                                cons,100,1000:refs1.txt:n,1000:refs2.txt:y:2.3:1000000,10000"
    echo "                                [default: 10,100,1000,10000]"
    echo "   [odgi]"
    echo "    -v, --viz                   render a visualization of the graph in 1D"
    echo "    -L, --layout                render a 2D layout of the graph"
    echo "    -S, --stats                 generate statistics of the seqwish and smoothxg graph [default: OFF]"
    echo "   [multiqc]"
    echo "    -m, --multiqc               generate MultiQC report of graphs' statistics and visualizations,"
    echo "                                automatically runs odgi stats [default: OFF]"
    echo "   [general]"
    echo "    -o, --output-dir PATH       output directory"
    echo "    -r, --resume                do not overwrite existing output from edyeet, seqwish, smoothxg"
    echo "                                [default: start pipeline from scratch]"
    echo "    -t, --threads N             number of compute threads to use in parallel steps"
    echo "    -h, --help                  this text"
    echo
    echo "Use edyeet, seqwish, smoothxg, and odgi to build and display a pangenome graph."
    exit
fi

# Parameter expansion http://mywiki.wooledge.org/BashFAQ/073
target_filename=${target_fasta##*/}
target_filestub=${target_filename%.*}
query_filename=${query_fasta##*/}
query_filestub=${query_filename%.*}
out_filestub="${target_filestub}_${query_filestub}"

mapper_letter='E'
if [[ "$mapper" == "mashz" ]];
then
    mapper_letter='Z'
fi


prefix_paf=mpggb-$mapper_letter-s$segment_length-l$block_length-p$map_pct_id-n$n_secondary-a$align_pct_id-K$mash_kmer
# add lastz params and replace spaces with underscores
shopt -s extglob
prefix_paf="${prefix_paf}-z${lastz_params//+([[:space:]-])/_}"

# mashz_params="mashz_p${map_pct_id}_s${segment_length}_n${n_secondary}_a${align_pct_id}_l${block_length}"

if [[ $no_merge_segments == true ]];
then
    merge_cmd=-M
    prefix_paf="$prefix_paf"-M
fi

if [[ $no_splits == true ]];
then
    split_cmd=-N
    prefix_paf="$prefix_paf"-N
fi

if [[ $exclude_delim != false ]];
then
    exclude_cmd="-Y "$exclude_delim
else
    exclude_cmd=-X
fi

if [[ $mapper == "edyeet" ]];
then
    prefix_paf="$prefix_paf"
elif [[ $mapper == "wfmash" ]];
then
    prefix_paf="$prefix_paf"
fi

mashz_params=$prefix_paf

# Graph induction
prefix_seqwish="$prefix_paf".seqwish-k$min_match_length-B$transclose_batch

seqwish_params=$prefix_seqwish
bandage_params="bandage_w${bandage_node_width}"
odgi_viz_x="1920"
odgi_viz_y="1080"

mashz_alignment="$output_dir"/"${out_filestub}.${mashz_params}.paf"
dotplot_file="$output_dir"/"${out_filestub}.${mashz_params}.gp"
dotplot_png="$output_dir"/"${out_filestub}.${mashz_params}.dotplot.png"


seqwish_gfa="$output_dir"/"${out_filestub}.${seqwish_params}.gfa"

odgi_graph="$output_dir"/"${out_filestub}.${seqwish_params}.odgi.og"
sorted_odgi_graph="$output_dir"/"${out_filestub}.${seqwish_params}.odgi.sorted.og"
odgi_gfa="$output_dir"/"${out_filestub}.${seqwish_params}.odgi.gfa"

odgi_viz="$output_dir"/"${out_filestub}.${seqwish_params}.sorted.odgi_viz.png"
odgi_stats="$output_dir"/"${out_filestub}.${seqwish_params}.odgi.stats.txt"

bandage_viz="$output_dir"/"${out_filestub}.${seqwish_params}.${bandage_params}.sorted.bandage_viz.png"

current_dir="$(dirname "$(readlink -f "$0")")"

seqwish_fasta=$query_fasta
if [[ $target_fasta != $query_fasta ]]
then
    seqwish_fasta=<(cat $target_fasta $query_fasta)
fi


# log it
date=`date "+%m-%d-%Y_%H:%M:%S"`
run_id="$mashz_params".$date

if [[ $output_dir == "." ]]
then
    mkdir $run_id
    cd $run_id
fi

log_file="$mashz_params".$date.log
echo "mashz $target_fasta $query_fasta \
-X \
$merge_cmd \
-t $threads \
-l $block_length \
-s $segment_length \
-n $n_secondary \
-p $map_pct_id \
-a $align_pct_id \
-z \"${lastz_params}\"

seqwish -t $threads \
-P \
-k $min_match_length \
-s $seqwish_fasta \
-p $mashz_alignment \
-g $seqwish_gfa

odgi build \
-g $seqwish_gfa \
-o $odgi_graph

odgi sort \
-p Ygs \
-i $odgi_graph \
-o $sorted_odgi_graph
" > $log_file



printf "\n------------------ mashz align ---------------\n"
mashz $target_fasta \
      $query_fasta \
      -X \
      $merge_cmd \
      -t $threads \
      -l $block_length \
      -s $segment_length \
      -n $n_secondary \
      -p $map_pct_id \
      -a $align_pct_id \
      -z "${lastz_params}" \
      > $mashz_alignment

printf "\n-------- generate plot of the alignment -----\n"
${current_dir}/paf2dotplot png large $mashz_alignment
mv out.gp $dotplot_file
gnuplot $dotplot_file
mv out.png $dotplot_png

printf "\n------------ induce variation graph ----------\n"
seqwish -t $threads \
        -P \
        -k $min_match_length \
        -s $seqwish_fasta \
        -p $mashz_alignment \
        -g $seqwish_gfa

printf "\n----------------- odgi graph ------------------\n"
odgi build \
     -g $seqwish_gfa \
     -o $odgi_graph

odgi sort \
     -p Ygs \
     -i $odgi_graph \
     -o $sorted_odgi_graph

odgi viz \
     -b \
     -x $odgi_viz_x \
     -y $odgi_viz_y \
     -i $sorted_odgi_graph \
     -o $odgi_viz

odgi stats \
     -i $odgi_graph \
     -S \
     > $odgi_stats

odgi view \
     -i $odgi_graph \
     -g \
     > $odgi_gfa

printf "\n----------------- Generate bandage viz ------------------\n"
Bandage image \
        $odgi_gfa \
        $bandage_viz \
        --nodewidth $bandage_node_width


# move gnuplot stuff
if [[ $output_dir != "." ]]
then
mv out* $output_dir
fi
